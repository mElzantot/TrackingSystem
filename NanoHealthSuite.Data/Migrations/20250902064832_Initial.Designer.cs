// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkflowTracking.Infrastructure.Data;

#nullable disable

namespace NanoHealthSuite.Data.Migrations
{
    [DbContext(typeof(WorkflowDbContext))]
    [Migration("20250902064832_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NanoHealthSuite.Data.Models.CustomValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.Property<string>("ValidationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("StepId");

                    b.ToTable("CustomValidations");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CurrentStepId")
                        .HasColumnType("integer");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStepId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.ProcessExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProcessId")
                        .HasColumnType("integer");

                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("StepId");

                    b.HasIndex("UserId");

                    b.ToTable("ProcessExecutions");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.ValidationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<int>("ProcessExecutionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProcessExecutionId");

                    b.HasIndex("ProcessId");

                    b.ToTable("ValidationLogs");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.WorkflowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("NextStepId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NextStepId")
                        .IsUnique();

                    b.HasIndex("UserRoleId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowSteps");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.CustomValidation", b =>
                {
                    b.HasOne("NanoHealthSuite.Data.Models.WorkflowStep", "Step")
                        .WithMany("Validations")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.Process", b =>
                {
                    b.HasOne("NanoHealthSuite.Data.Models.WorkflowStep", "CurrentStep")
                        .WithMany("Processes")
                        .HasForeignKey("CurrentStepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NanoHealthSuite.Data.Models.User", "Initiator")
                        .WithMany("InitiatedProcesses")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NanoHealthSuite.Data.Models.Workflow", "Workflow")
                        .WithMany("Processes")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentStep");

                    b.Navigation("Initiator");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.ProcessExecution", b =>
                {
                    b.HasOne("NanoHealthSuite.Data.Models.Process", "Process")
                        .WithMany("Executions")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanoHealthSuite.Data.Models.WorkflowStep", "WorkflowStep")
                        .WithMany("ProcessExecutions")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NanoHealthSuite.Data.Models.User", "User")
                        .WithMany("ProcessExecutions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("User");

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.User", b =>
                {
                    b.HasOne("NanoHealthSuite.Data.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.ValidationLog", b =>
                {
                    b.HasOne("NanoHealthSuite.Data.Models.ProcessExecution", "ProcessExecution")
                        .WithMany("ValidationLogs")
                        .HasForeignKey("ProcessExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanoHealthSuite.Data.Models.Process", null)
                        .WithMany("ValidationLogs")
                        .HasForeignKey("ProcessId");

                    b.Navigation("ProcessExecution");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.WorkflowStep", b =>
                {
                    b.HasOne("NanoHealthSuite.Data.Models.WorkflowStep", "NextStep")
                        .WithOne("PreviousStepOf")
                        .HasForeignKey("NanoHealthSuite.Data.Models.WorkflowStep", "NextStepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NanoHealthSuite.Data.Models.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NanoHealthSuite.Data.Models.Workflow", "Workflow")
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NextStep");

                    b.Navigation("UserRole");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.Process", b =>
                {
                    b.Navigation("Executions");

                    b.Navigation("ValidationLogs");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.ProcessExecution", b =>
                {
                    b.Navigation("ValidationLogs");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.User", b =>
                {
                    b.Navigation("InitiatedProcesses");

                    b.Navigation("ProcessExecutions");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.Workflow", b =>
                {
                    b.Navigation("Processes");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("NanoHealthSuite.Data.Models.WorkflowStep", b =>
                {
                    b.Navigation("PreviousStepOf");

                    b.Navigation("ProcessExecutions");

                    b.Navigation("Processes");

                    b.Navigation("Validations");
                });
#pragma warning restore 612, 618
        }
    }
}
